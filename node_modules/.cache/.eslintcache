[{"/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/index.js":"1","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/App.js":"2","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/reportWebVitals.js":"3","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/components/Todos.js":"4","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/components/AddTodo.js":"5","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/features/todo/todoSlice.js":"6","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/app/store.js":"7"},{"size":559,"mtime":1697357038650,"results":"8","hashOfConfig":"9"},{"size":1385,"mtime":1699264833774,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1697231376816,"results":"11","hashOfConfig":"9"},{"size":2500,"mtime":1699261508480,"results":"12","hashOfConfig":"9"},{"size":992,"mtime":1699264959024,"results":"13","hashOfConfig":"9"},{"size":1240,"mtime":1699261567929,"results":"14","hashOfConfig":"9"},{"size":225,"mtime":1699081178549,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"m18s7p",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/index.js",[],[],["40"],"/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/App.js",["41","42"],[],"/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/reportWebVitals.js",[],[],"/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/components/Todos.js",["43","44"],[],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {addTodo, removeTodo, updateTodo, toggleComplete} from '../features/todo/todoSlice'\n\nfunction Todos({todo}) {\n  \n  const [isTodoEditable, setIsTodoEditable] = useState(false)\n  const [todoMsg, setTodoMsg] = useState(todo.text)\n  const dispatch = useDispatch()\n\n  const editTodo = () => {\n    dispatch(updateTodo( {id: todo.id, text: todoMsg}))\n    console.log(\"Updation:\", todo)\n    setIsTodoEditable(false)\n  }\n  const toggleCompleted = () => {\n    console.log('dispatch triggered...', todo.completed );\n    dispatch(toggleComplete({id: todo.id}))\n    console.log('dispatch triggered after...', todo.completed)\n  }\n\n  return (\n      <div\n          className={`flex border border-black/10 rounded-lg px-3 py-1.5 gap-x-3 shadow-sm shadow-white/50 duration-300  text-black ${\n              todo.completed ? \"bg-[#c6e9a7]\" : \"bg-[#ccbed7]\"\n          }`}\n      >\n          <input\n              type=\"checkbox\"\n              className=\"cursor-pointer\"\n              checked={todo.completed}\n              onChange={toggleCompleted}\n          />\n          <input\n              type=\"text\"\n              className={`border outline-none w-full bg-transparent rounded-lg ${\n                  isTodoEditable ? \"border-black/10 px-2\" : \"border-transparent\"\n              } ${todo.completed ? \"line-through\" : \"\"}`}\n              value={todoMsg}\n              onChange={(e) => setTodoMsg(e.target.value)}\n              readOnly={!isTodoEditable}\n          />\n          {/* Edit, Save Button */}\n          <button\n              className=\"inline-flex w-8 h-8 rounded-lg text-sm border border-black/10 justify-center items-center bg-gray-50 hover:bg-gray-100 shrink-0 disabled:opacity-50\"\n              onClick={() => {\n                  if (todo.completed) return;\n\n                  if (isTodoEditable) {\n                      editTodo();\n                  } else setIsTodoEditable((prev) => !prev);\n              }}\n              disabled={todo.completed}\n          >\n              {isTodoEditable ? \"üìÅ\" : \"‚úèÔ∏è\"}\n          </button>\n          {/* Delete Todo Button */}\n          <button\n              className=\"inline-flex w-8 h-8 rounded-lg text-sm border border-black/10 justify-center items-center bg-gray-50 hover:bg-gray-100 shrink-0\"\n              onClick={() => dispatch(removeTodo(todo.id))}\n          >\n              ‚ùå\n          </button>\n         \n      </div>\n  );\n}\n\nexport default Todos","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/components/AddTodo.js",[],[],"/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/features/todo/todoSlice.js",["45","46"],[],"import {createSlice, nanoid } from '@reduxjs/toolkit';\nimport { act } from 'react-dom/test-utils';\n\n\nconst initialState = {\n    todos: [\n        // {id: 1, text: \"Hello world\", completed : false}\n    ] \n}\n\nconst ntodos =[]\n\nexport const todoSlice = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        addTodo: (state, action) => {\n            const todo = {\n                id: nanoid(), \n                text: action.payload,\n                completed: false\n            }\n            state.todos.push(todo)\n            // console.log(\"Added item: \", todo)\n        },\n\n        removeTodo: (state, action) => { state.todos = state.todos.filter((todo) => todo.id !== action.payload ) },\n\n        updateTodo: (state, action) => {  state.todos = state.todos.map((todo) =>todo.id === action.payload.id ? {...todo, text: action.payload.text} : todo  )},\n        \n        toggleComplete: (state, action) => {  state.todos = state.todos.map((todo) =>todo.id === action.payload.id ? {...todo, completed: !todo.completed} : todo  )}\n    }})\n\n// they will help in individual components\nexport const {addTodo, removeTodo, updateTodo, toggleComplete} = todoSlice.actions\n\n// to update store states\nexport default todoSlice.reducer","/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/app/store.js",[],[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":18},{"ruleId":"49","severity":1,"message":"53","line":7,"column":23,"nodeType":"51","messageId":"52","endLine":7,"endColumn":34},{"ruleId":"49","severity":1,"message":"54","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":21},{"ruleId":"49","severity":1,"message":"55","line":3,"column":9,"nodeType":"51","messageId":"52","endLine":3,"endColumn":16},{"ruleId":"49","severity":1,"message":"56","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":13},{"ruleId":"49","severity":1,"message":"57","line":11,"column":7,"nodeType":"51","messageId":"52","endLine":11,"endColumn":13},"no-new-object",["58"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'addTodo' is defined but never used.","'act' is defined but never used.","'ntodos' is assigned a value but never used.","no-object-constructor"]