{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  // editable : false,\n  todos: [{\n    id: 1,\n    text: \"Hello world\",\n    editable: false\n  }] // {id: 1, text: \"Hello world\"}\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      const todo = {\n        id: nanoid(),\n        text: action.payload,\n        editable: false\n      };\n      state.todos.push(todo);\n      console.log(\"Added item: \", todo);\n    },\n    removeTodo: (state, action) => {\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n    },\n    updateTodo: (state, action) => {\n      console.log(\"update called\");\n      state.todos = state.todos.map(todo => todo.id === action.payload.id ? {\n        ...todo,\n        text: action.payload\n      } : todo);\n      console.log(\"updated todo..\", state.todos);\n    },\n    // setEditable2: (state, action) => {\n    //     console.log(\"set editable called\", action.payload.id)\n    //     state.todos = state.todos.map((todo) => todo.id === action.payload.id ? true : todo)\n    //     console.log(\"set todo..\", state.todos)\n    // },\n\n    setEditable: (state, action) => {\n      state.todos = state.todos.map(todo => {\n        if (todo.id === action.payload.id) {\n          console.log(\"Id matched\", action.payload.id);\n          return {\n            ...todo,\n            editable: !todo.editable\n          };\n        }\n      });\n    }\n  }\n});\n\n// they will help in individual components\nexport const {\n  addTodo,\n  removeTodo,\n  updateTodo,\n  setEditable\n} = todoSlice.actions;\n\n// to update store states\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","todos","id","text","editable","todoSlice","name","reducers","addTodo","state","action","todo","payload","push","console","log","removeTodo","filter","updateTodo","map","setEditable","actions","reducer"],"sources":["/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/features/todo/todoSlice.js"],"sourcesContent":["import {createSlice, nanoid } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    // editable : false,\n    todos: [\n        {id: 1, text: \"Hello world\", editable : false}\n    ] // {id: 1, text: \"Hello world\"}\n}\n\nexport const todoSlice = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        addTodo: (state, action) => {\n            const todo = {\n                id: nanoid(), \n                text: action.payload,\n                editable: false\n            }\n            state.todos.push(todo)\n            console.log(\"Added item: \", todo)\n        },\n        removeTodo: (state, action) => {\n            state.todos = state.todos.filter((todo) => todo.id !== action.payload )\n        },\n        updateTodo: (state, action) => {\n            console.log(\"update called\")\n            state.todos = state.todos.map((todo) => todo.id === action.payload.id ?{...todo, text: action.payload} : todo)\n            console.log(\"updated todo..\", state.todos)\n        },\n        // setEditable2: (state, action) => {\n        //     console.log(\"set editable called\", action.payload.id)\n        //     state.todos = state.todos.map((todo) => todo.id === action.payload.id ? true : todo)\n        //     console.log(\"set todo..\", state.todos)\n        // },\n\n        setEditable : (state, action) => {\n            state.todos = state.todos.map ((todo) => {\n                if ( todo.id === action.payload.id){\n                    console.log(\"Id matched\", action.payload.id)\n                    return{\n                        ...todo,\n                        editable: !todo.editable\n                    }\n                }\n            })\n        }\n    }})\n\n// they will help in individual components\nexport const {addTodo, removeTodo, updateTodo, setEditable} = todoSlice.actions\n\n// to update store states\nexport default todoSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAGrD,MAAMC,YAAY,GAAG;EACjB;EACAC,KAAK,EAAE,CACH;IAACC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,aAAa;IAAEC,QAAQ,EAAG;EAAK,CAAC,CACjD,CAAC;AACN,CAAC;;AAED,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;EACjCQ,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB,MAAMC,IAAI,GAAG;QACTT,EAAE,EAAEH,MAAM,CAAC,CAAC;QACZI,IAAI,EAAEO,MAAM,CAACE,OAAO;QACpBR,QAAQ,EAAE;MACd,CAAC;MACDK,KAAK,CAACR,KAAK,CAACY,IAAI,CAACF,IAAI,CAAC;MACtBG,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEJ,IAAI,CAAC;IACrC,CAAC;IACDK,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACgB,MAAM,CAAEN,IAAI,IAAKA,IAAI,CAACT,EAAE,KAAKQ,MAAM,CAACE,OAAQ,CAAC;IAC3E,CAAC;IACDM,UAAU,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC3BI,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5BN,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACkB,GAAG,CAAER,IAAI,IAAKA,IAAI,CAACT,EAAE,KAAKQ,MAAM,CAACE,OAAO,CAACV,EAAE,GAAE;QAAC,GAAGS,IAAI;QAAER,IAAI,EAAEO,MAAM,CAACE;MAAO,CAAC,GAAGD,IAAI,CAAC;MAC9GG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEN,KAAK,CAACR,KAAK,CAAC;IAC9C,CAAC;IACD;IACA;IACA;IACA;IACA;;IAEAmB,WAAW,EAAGA,CAACX,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACkB,GAAG,CAAGR,IAAI,IAAK;QACrC,IAAKA,IAAI,CAACT,EAAE,KAAKQ,MAAM,CAACE,OAAO,CAACV,EAAE,EAAC;UAC/BY,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEL,MAAM,CAACE,OAAO,CAACV,EAAE,CAAC;UAC5C,OAAM;YACF,GAAGS,IAAI;YACPP,QAAQ,EAAE,CAACO,IAAI,CAACP;UACpB,CAAC;QACL;MACJ,CAAC,CAAC;IACN;EACJ;AAAC,CAAC,CAAC;;AAEP;AACA,OAAO,MAAM;EAACI,OAAO;EAAEQ,UAAU;EAAEE,UAAU;EAAEE;AAAW,CAAC,GAAGf,SAAS,CAACgB,OAAO;;AAE/E;AACA,eAAehB,SAAS,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}