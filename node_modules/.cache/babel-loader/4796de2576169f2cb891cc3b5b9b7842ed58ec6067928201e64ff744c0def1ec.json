{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  // editable : false,\n  todos: [] // {id: 1, text: \"Hello world\"}\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      const todo = {\n        id: nanoid(),\n        text: action.payload,\n        editable: false\n      };\n      state.todos.push(todo);\n    },\n    removeTodo: (state, action) => {\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n    },\n    updateTodo: (state, action) => {\n      console.log(\"update called\");\n      state.todos = state.todos.map(todo => todo.id === action.payload.id ? action.payload : todo);\n      // console.log(\"updated todo..\", state.todos)\n    },\n\n    setEditable: (state, action) => {\n      console.log(\"set editable called\");\n      state.todos = state.todos.map(todo => todo.id === action.payload.id ? {\n        ...todo,\n        editable: !todo.editable\n      } : todo);\n      console.log(\"set todo..\", state.todos);\n    }\n    // setEditable: (state, action) => {\n    //     console.log(\"editable called:\")\n    //     state.todos = state.todos.map((todo) => {\n    //         if (todo.id === action.payload.id) \n    //              {\n    //                 ...todo,\n    //                 editable: !(todo.editable)\n    //             };\n\n    //         console.log(\"updated todo..\", state.todos)\n    //         // return todo;\n    //     });\n    // }\n    // }\n    // })\n  }\n});\n\n// they will help in individual components\nexport const {\n  addTodo,\n  removeTodo,\n  updateTodo,\n  setEditable\n} = todoSlice.actions;\n\n// to update store states\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","todos","todoSlice","name","reducers","addTodo","state","action","todo","id","text","payload","editable","push","removeTodo","filter","updateTodo","console","log","map","setEditable","actions","reducer"],"sources":["/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/features/todo/todoSlice.js"],"sourcesContent":["import {createSlice, nanoid } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    // editable : false,\n    todos: [] // {id: 1, text: \"Hello world\"}\n}\n\nexport const todoSlice = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        addTodo: (state, action) => {\n            const todo = {\n                id: nanoid(), \n                text: action.payload,\n                editable: false\n            }\n            state.todos.push(todo)\n        },\n        removeTodo: (state, action) => {\n            state.todos = state.todos.filter((todo) => todo.id !== action.payload )\n        },\n        updateTodo: (state, action) => {\n            console.log(\"update called\")\n            state.todos = state.todos.map((todo) => todo.id === action.payload.id ? action.payload : todo)\n            // console.log(\"updated todo..\", state.todos)\n        },\n        setEditable: (state, action) => {\n            console.log(\"set editable called\")\n            state.todos = state.todos.map((todo) => todo.id === action.payload.id ? {...todo, editable : !todo.editable} : todo)\n            console.log(\"set todo..\", state.todos)\n        }\n        // setEditable: (state, action) => {\n        //     console.log(\"editable called:\")\n        //     state.todos = state.todos.map((todo) => {\n        //         if (todo.id === action.payload.id) \n        //              {\n        //                 ...todo,\n        //                 editable: !(todo.editable)\n        //             };\n                \n        //         console.log(\"updated todo..\", state.todos)\n        //         // return todo;\n        //     });\n        // }\n    // }\n// })\n    }})\n\n// they will help in individual components\nexport const {addTodo, removeTodo, updateTodo, setEditable} = todoSlice.actions\n\n// to update store states\nexport default todoSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAGrD,MAAMC,YAAY,GAAG;EACjB;EACAC,KAAK,EAAE,EAAE,CAAC;AACd,CAAC;;AAED,OAAO,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EACjCK,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB,MAAMC,IAAI,GAAG;QACTC,EAAE,EAAEV,MAAM,CAAC,CAAC;QACZW,IAAI,EAAEH,MAAM,CAACI,OAAO;QACpBC,QAAQ,EAAE;MACd,CAAC;MACDN,KAAK,CAACL,KAAK,CAACY,IAAI,CAACL,IAAI,CAAC;IAC1B,CAAC;IACDM,UAAU,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACc,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKF,MAAM,CAACI,OAAQ,CAAC;IAC3E,CAAC;IACDK,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC3BU,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5BZ,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACkB,GAAG,CAAEX,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKF,MAAM,CAACI,OAAO,CAACF,EAAE,GAAGF,MAAM,CAACI,OAAO,GAAGH,IAAI,CAAC;MAC9F;IACJ,CAAC;;IACDY,WAAW,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAC5BU,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCZ,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACkB,GAAG,CAAEX,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKF,MAAM,CAACI,OAAO,CAACF,EAAE,GAAG;QAAC,GAAGD,IAAI;QAAEI,QAAQ,EAAG,CAACJ,IAAI,CAACI;MAAQ,CAAC,GAAGJ,IAAI,CAAC;MACpHS,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEZ,KAAK,CAACL,KAAK,CAAC;IAC1C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACJ;IACJ;EACI;AAAC,CAAC,CAAC;;AAEP;AACA,OAAO,MAAM;EAACI,OAAO;EAAES,UAAU;EAAEE,UAAU;EAAEI;AAAW,CAAC,GAAGlB,SAAS,CAACmB,OAAO;;AAE/E;AACA,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}