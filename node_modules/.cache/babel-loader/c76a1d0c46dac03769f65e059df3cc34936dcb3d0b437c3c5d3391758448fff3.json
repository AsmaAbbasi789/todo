{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  // editable : false,\n  todos: [{\n    id: 1,\n    text: \"Hello world\",\n    completed: false\n  }] // {id: 1, text: \"Hello world\"}\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      const todo = {\n        id: nanoid(),\n        text: action.payload,\n        editable: false\n      };\n      state.todos.push(todo);\n      console.log(\"Added item: \", todo);\n    },\n    removeTodo: (state, action) => {\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n    },\n    updateTodo: (state, action) => {\n      console.log(\"update called\");\n      state.todos = state.todos.map(todo => todo.id === action.payload.id ? action.payload.text : todo);\n      // state.todos = state.todos.map((todo) => todo.id === action.payload.id ? {...todo, text: action.payload.text} : todo)\n      console.log(\"updated todo..\", state.todos);\n    },\n    toggleComplete: (state, action) => {\n      console.log(\"before toggle: \", state.todos);\n      state.todos = state.todos.map(todo => todo.id === action.payload.id ? {\n        ...todo,\n        completed: !todo.completed\n      } : todo);\n      console.log(\"after toggle: \", state.todos);\n    }\n  }\n});\n\n// they will help in individual components\nexport const {\n  addTodo,\n  removeTodo,\n  updateTodo,\n  toggleComplete\n} = todoSlice.actions;\n\n// to update store states\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","todos","id","text","completed","todoSlice","name","reducers","addTodo","state","action","todo","payload","editable","push","console","log","removeTodo","filter","updateTodo","map","toggleComplete","actions","reducer"],"sources":["/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/features/todo/todoSlice.js"],"sourcesContent":["import {createSlice, nanoid } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    // editable : false,\n    todos: [\n        {id: 1, text: \"Hello world\", completed : false}\n    ] // {id: 1, text: \"Hello world\"}\n}\n\nexport const todoSlice = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        addTodo: (state, action) => {\n            const todo = {\n                id: nanoid(), \n                text: action.payload,\n                editable: false\n            }\n            state.todos.push(todo)\n            console.log(\"Added item: \", todo)\n        },\n        removeTodo: (state, action) => {\n            state.todos = state.todos.filter((todo) => todo.id !== action.payload )\n        },\n        updateTodo: (state, action) => {\n            console.log(\"update called\")\n            state.todos = state.todos.map((todo) => todo.id === action.payload.id ?  action.payload.text : todo)\n            // state.todos = state.todos.map((todo) => todo.id === action.payload.id ? {...todo, text: action.payload.text} : todo)\n            console.log(\"updated todo..\", state.todos)\n        },\n        toggleComplete : (state, action) => {\n            console.log(\"before toggle: \", state.todos)\n            state.todos = state.todos.map((todo) => \n              \n              todo.id === action.payload.id ? \n              { ...todo, completed: !todo.completed } \n                : todo)\n                console.log(\"after toggle: \", state.todos)\n          }\n    }})\n\n// they will help in individual components\nexport const {addTodo, removeTodo, updateTodo, toggleComplete} = todoSlice.actions\n\n// to update store states\nexport default todoSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAGrD,MAAMC,YAAY,GAAG;EACjB;EACAC,KAAK,EAAE,CACH;IAACC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,aAAa;IAAEC,SAAS,EAAG;EAAK,CAAC,CAClD,CAAC;AACN,CAAC;;AAED,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;EACjCQ,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB,MAAMC,IAAI,GAAG;QACTT,EAAE,EAAEH,MAAM,CAAC,CAAC;QACZI,IAAI,EAAEO,MAAM,CAACE,OAAO;QACpBC,QAAQ,EAAE;MACd,CAAC;MACDJ,KAAK,CAACR,KAAK,CAACa,IAAI,CAACH,IAAI,CAAC;MACtBI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEL,IAAI,CAAC;IACrC,CAAC;IACDM,UAAU,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACiB,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACT,EAAE,KAAKQ,MAAM,CAACE,OAAQ,CAAC;IAC3E,CAAC;IACDO,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC3BK,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5BP,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACmB,GAAG,CAAET,IAAI,IAAKA,IAAI,CAACT,EAAE,KAAKQ,MAAM,CAACE,OAAO,CAACV,EAAE,GAAIQ,MAAM,CAACE,OAAO,CAACT,IAAI,GAAGQ,IAAI,CAAC;MACpG;MACAI,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEP,KAAK,CAACR,KAAK,CAAC;IAC9C,CAAC;IACDoB,cAAc,EAAGA,CAACZ,KAAK,EAAEC,MAAM,KAAK;MAChCK,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEP,KAAK,CAACR,KAAK,CAAC;MAC3CQ,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACmB,GAAG,CAAET,IAAI,IAEjCA,IAAI,CAACT,EAAE,KAAKQ,MAAM,CAACE,OAAO,CAACV,EAAE,GAC7B;QAAE,GAAGS,IAAI;QAAEP,SAAS,EAAE,CAACO,IAAI,CAACP;MAAU,CAAC,GACnCO,IAAI,CAAC;MACPI,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEP,KAAK,CAACR,KAAK,CAAC;IAChD;EACN;AAAC,CAAC,CAAC;;AAEP;AACA,OAAO,MAAM;EAACO,OAAO;EAAES,UAAU;EAAEE,UAAU;EAAEE;AAAc,CAAC,GAAGhB,SAAS,CAACiB,OAAO;;AAElF;AACA,eAAejB,SAAS,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}