{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  editable: false,\n  todos: [] // {id: 1, text: \"Hello world\"}\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      const todo = {\n        id: nanoid(),\n        text: action.payload\n      };\n      state.todos.push(todo);\n    },\n    removeTodo: (state, action) => {\n      state.todos = state.todos.filter(todo => todo.id !== action.payload);\n    },\n    updateTodo: (state, action) => {\n      console.log(\"update called\");\n      state.todos = state.todos.map(todo => todo.id === action.payload.id ? action.payload : todo);\n      // console.log(\"updated todo..\", state.todos)\n    },\n\n    setEditable: (state, action) => {\n      state.editable = !state.editable;\n    }\n  }\n});\n\n// they will help in individual components\nexport const {\n  addTodo,\n  removeTodo,\n  updateTodo\n} = todoSlice.actions;\n\n// to update store states\nexport default todoSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","editable","todos","todoSlice","name","reducers","addTodo","state","action","todo","id","text","payload","push","removeTodo","filter","updateTodo","console","log","map","setEditable","actions","reducer"],"sources":["/Users/Asma/Documents/ReactJS_/reduxtoolkit-todo/src/features/todo/todoSlice.js"],"sourcesContent":["import {createSlice, nanoid } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n    editable : false,\n    todos: [] // {id: 1, text: \"Hello world\"}\n}\n\nexport const todoSlice = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        addTodo: (state, action) => {\n            const todo = {\n                id: nanoid(), \n                text: action.payload\n            }\n            state.todos.push(todo)\n        },\n        removeTodo: (state, action) => {\n            state.todos = state.todos.filter((todo) => todo.id !== action.payload )\n        },\n        updateTodo: (state, action) => {\n            console.log(\"update called\")\n            state.todos = state.todos.map((todo) => todo.id === action.payload.id ? action.payload : todo)\n            // console.log(\"updated todo..\", state.todos)\n        },\n        setEditable: (state, action) => {\n            state.editable = !state.editable\n        }\n    }\n})\n\n\n// they will help in individual components\nexport const {addTodo, removeTodo, updateTodo} = todoSlice.actions\n\n// to update store states\nexport default todoSlice.reducer"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,MAAM,QAAQ,kBAAkB;AAGrD,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAG,KAAK;EAChBC,KAAK,EAAE,EAAE,CAAC;AACd,CAAC;;AAED,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB,MAAMC,IAAI,GAAG;QACTC,EAAE,EAAEX,MAAM,CAAC,CAAC;QACZY,IAAI,EAAEH,MAAM,CAACI;MACjB,CAAC;MACDL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACJ,IAAI,CAAC;IAC1B,CAAC;IACDK,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACa,MAAM,CAAEN,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKF,MAAM,CAACI,OAAQ,CAAC;IAC3E,CAAC;IACDI,UAAU,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC3BS,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5BX,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACiB,GAAG,CAAEV,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKF,MAAM,CAACI,OAAO,CAACF,EAAE,GAAGF,MAAM,CAACI,OAAO,GAAGH,IAAI,CAAC;MAC9F;IACJ,CAAC;;IACDW,WAAW,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACN,QAAQ,GAAG,CAACM,KAAK,CAACN,QAAQ;IACpC;EACJ;AACJ,CAAC,CAAC;;AAGF;AACA,OAAO,MAAM;EAACK,OAAO;EAAEQ,UAAU;EAAEE;AAAU,CAAC,GAAGb,SAAS,CAACkB,OAAO;;AAElE;AACA,eAAelB,SAAS,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}